{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","person","deleteUrl","id","delete","putUrl","put","Person","handleDelete","name","number","onClick","Persons","persons","filter","filteredPersons","toLowerCase","includes","map","key","Filter","handleChange","onChange","PersonForm","newName","newNumber","handleNameChange","handleNumberChange","handleSubmit","value","type","Notification","message","className","Error","App","useState","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","useEffect","personService","returnedPersons","event","target","preventDefault","existingPerson","find","undefined","returnedPerson","concat","setTimeout","window","confirm","catch","error","personToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf49fea5.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newPerson => {\n    const request = axios.post(baseUrl, newPerson)\n    return request.then(response => response.data)\n}\n\nconst remove = person => {\n    const deleteUrl = baseUrl + '/' + person.id\n    const request = axios.delete(deleteUrl)\n    return request.then(response => response.data)\n}\n\nconst update = (person, newPerson) => {\n    const putUrl = baseUrl + '/' + person.id\n    const request = axios.put(putUrl, newPerson)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, update }","/**\n * Full stack open 2020\n * Exercises 2.6 - 2.18 Phonebook\n */\nimport React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst Person = ({ person, handleDelete }) => <li>{person.name} {person.number} <button onClick={() => handleDelete(person)}>Delete</button></li>\n\nconst Persons = ({ persons, filter, handleDelete }) => {\n  const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(filter))\n  return (\n    <div>\n      <ul>\n        {filteredPersons.map(person => <Person key={person.name} person={person} handleDelete={handleDelete} />)}\n      </ul>\n    </div>\n  )\n}\n\nconst Filter = ({ handleChange }) => {\n  return (\n    <div>filter shown with <input onChange={handleChange} /></div>\n  )\n}\n\nconst PersonForm = ({ newName, newNumber, handleNameChange, handleNumberChange, handleSubmit }) => {\n  return (\n    <form>\n      <div>\n        <div>name: <input value={newName} onChange={handleNameChange} /></div>\n        <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n        <div><button onClick={handleSubmit} type=\"submit\">add</button></div>\n      </div>\n    </form>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message == null) {\n    return null\n  }\n  return (\n    <div className=\"notification\">\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n  if (message == null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  const hook = () => {\n    personService.getAll()\n      .then(returnedPersons => {\n        setPersons(returnedPersons)\n      })\n  }\n  useEffect(hook, [])\n\n  const handleAdd = (event) => {\n    event.preventDefault()\n    const newPerson = {name: newName, number: newNumber}\n    const existingPerson = persons.find(person => person.name === newPerson.name)\n    if (existingPerson === undefined) {\n      personService.create(newPerson)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNotificationMessage(`Added ${returnedPerson.name}`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n          setNewName('')\n          setNewNumber('')\n        })\n    } else {\n      if (window.confirm(`${existingPerson.name} is already added to phonebook, replace the old number with a new one?`)) {\n        personService.update(existingPerson, newPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id === returnedPerson.id ? returnedPerson : person))\n            setNewName('')\n            setNewNumber('')\n          })\n          .catch(error => {\n            setPersons(persons.filter(person => person.id !== existingPerson.id))\n            setErrorMessage(`Information of ${existingPerson.name} has already been removed from server`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 3000)\n          })\n        }\n    }\n  }\n\n  const handleDelete = (personToDelete) => {\n    if (personToDelete && window.confirm(`Delete ${personToDelete.name}?`)) {\n      personService.remove(personToDelete)\n        .then(response => {\n          setPersons(persons.filter(person => person.id !== personToDelete.id))\n          setNotificationMessage(`Removed ${personToDelete.name}`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 3000)\n        })\n        .catch(error => {\n          setPersons(persons.filter(person => person.id !== personToDelete.id))\n          setErrorMessage(`Information of ${personToDelete.name} has already been removed from server`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000)\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value.toLowerCase())\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Error message={errorMessage} />\n      <Filter handleChange={handleFilterChange} />\n      <h2>Add a new</h2>\n      <PersonForm newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} handleSubmit={handleAdd} />\n      <h2>Numbers</h2>\n        <Persons persons={persons} filter={filter} handleDelete={handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}